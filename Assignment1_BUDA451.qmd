---
title: "Assignment 1 BUDA 451"
author: "Collin Edwards"
date: "today"
format: pdf
editor: visual
jupyter: python3
---

# Data Structures

## Question 1a

#### Given list s = ‚ÄúHamburg‚Äù, how do you index/slice ‚Äúmbur‚Äù from list s?

In order to slice the character is at mburg out of hamburg, you have to first note where the charcters are.[^1] since `m` is at the 2nd position,`b` is in position 3,`u` is in position 4 and `r` is at position 5.

[^1]: Since python like many programming languages start counting from 0 you have to account for that when slicing a matrix of anything.

```{python}
s = "hamburg"
substring = s[2:6]
print(substring)  # Output: "mbur"
```

## Question 1b

#### What the major differences between two Python data structures: **list** and **set**. Give a or two application examples where we might need to convert a list to a set.

List

:   *Maintains the order* if elements and allows you to index via normal means. Can also contain duplicate elements.

Set

:   *Unordered* collection of elements. Does *not* support indexing or slicing since the order is not guaranteed. Automatically removes the duplicate elements since each one is unique

##### Application examples for converting a list to a set

1.  **Removing Duplicates** For instance if you have a bunch of email addresses in your list and you want to include only unique entries
2.  **Membership Testing** If you want to frequently check whether an element exists within a collection, if you convert the list to a set this can reduce run time and improve performance

## Question 1c

#### If you are working with a toy dataset as show in following

| **student_id** | **gpa** |
|:---------------|---------|
| 001            | 4.6     |
| 002            | 4.2     |
| 003            | 4.0     |

#### and you want to use a `dictionary` to store the data for further processing. Write Python code to demonstrate how to create such a `dictionary` in Python, and to iterate over the `key`: `value` pairs.

```{python}
''' creating the dictionary. essentially storing the values in variables and 
associating the variables with the other variable'''
gpa_dict = {
    "001": 4.6,
    "002": 4.2,
    "003": 4.0
}

# iterating over the key-value pairs with a for statement
for student_id, gpa in gpa_dict.items():
    print(f"Student ID: {student_id}, GPA: {gpa}") 
    '''the .items() method used in the line above will return a view object and 
    a list of the key-value tuple pairs. Tuples are also immutable compared to 
    lists'''
```

**This code will print each of the student ID's along with their GPA**

# Function and library

## Question 2a Write a Python function to calculate the Euclidean distance between two data points `x` and `y`.

The Euclidean distance between two data points ùê± = \[ùë•1, ùë•2, ‚Ä¶ , ùë•ùëõ\] and ùê≤ = \[ùë¶1, ùë¶2, ‚Ä¶ , ùë¶ùëõ\] is defined as **Euclidean Distance Formula**

The Euclidean distance between two data points\
$\mathbf{x} = [x_1, x_2, \dots, x_n]$\
and\
$\mathbf{y} = [y_1, y_2, \dots, y_n]$\
is defined as:

$$
d(\mathbf{x}, \mathbf{y}) = \sqrt{\sum_{k=1}^{n} (x_k - y_k)^2}
$$

```{python}
import math # importing for math operations

def euc_dist(x, y):
    # ensuring that the two lists have the same length
    if len(x) != len(y):
        raise ValueError("The data points must have the same dimension.")
    
    sum_squared = 0
    for xi, yi in zip(x, y):#using for to iterate over paired elements
        sum_squared += math.pow(xi - yi, 2)
    dist = math.sqrt(sum_squared)#calculates square root to get euclidean distance
    return dist

# given data points from the question
x = [1, 2, 4, -4]
y = [10.5, 12.1, 13.2, 105.8]

# Calculate the Euclidean distance
distance = euc_dist(x, y)
print("Euclidean distance:", distance)

```

# Numpy and Pandas

## Question 3a create a 10x10 array with random numbers, and name it as `np_data`. Print out the array.

```{python}
import numpy as np
import pandas as pd

'''creating a 10x10 array with random numbers and print it. Note: np.random.rand 
generates numbers in [0, 1)'''

np_data = np.random.rand(10, 10)
print("np_data:")
print(np_data)

```

## Question 3a Part II slice the sub-array of 6th-10th rows, 1st-5th columns of `np_data`, and name it as `subdata` (`subdata` should be a 5x5 array). Print out the sub-array.

```{python}
#    Since Python uses zero-based indexing as mentioned earlier:
#    - 6th to 10th rows correspond to indices 5 to 9.
#    - 1st to 5th columns correspond to indices 0 to 4.
subdata = np_data[5:10, 0:5]
print("\nSub-array (6th-10th rows, 1st-5th columns):")
print(subdata)

```

## Question 3b create a `Pandas DataFrame` from `np_data` above, and name it as `pd_data`. Print out `pd_data`. Then slice the sub-DataFrame of 1st-5th rows, 6th-10th columns of `pd_data`, and name it as `subdf` (`subdf` should be a 5x5 dataframe). Print out `subdf`.

```{python}

# Creating a df from np_data and print it.
pd_data = pd.DataFrame(np_data)
print("\npd_data DataFrame:")
print(pd_data)
pd_data = pd.DataFrame(np_data)
subdf = pd_data.iloc[0:5, 5:10]
print("\nSub-DataFrame (1st-5th rows, 6th-10th columns):")
print(subdf)

```

I use *iloc* because I wanted to select rows and columns based on their order in the df rather than their labels. It's like slicing a list. e.g df.iloc\[0:5\] gives you the first 5 rows. df.iloc\[:, 5:10\] gives you the columns in positions 6 through 10.

# Tabular data

## Question 4 You are given the UCI Parkinsons Data Set:This dataset is composed of a range ofbiomedical voice measurements from 31 people, 23 with Parkinson's disease (PD). Each column in the table is a particular voice measure, and each row corresponds one of 195 voice recording from these individuals ("name" column). The main aim of the data is to discriminate healthy people from those with PD, according to "status" column which is set to 0 for healthy and 1 for PD. The data is in ASCII CSV format. You may find more introduction about the data here: https://archive.ics.uci.edu/ml/datasets/Parkinsons

```{python}

df = pd.read_csv("~/Downloads/parkinsons(2).data")
print(df.head)
# (b) Display summary statistics for all attributes.
print("Summary statistics for all attributes:")
print(df.describe())

# (c) Plot histograms for the attributes: PPE, DFA, MDVP:Fo(Hz)
import matplotlib.pyplot as plt

attributes = ['PPE', 'DFA', 'MDVP:Fo(Hz)']

for attr in attributes:
    plt.figure(figsize=(6, 4))
    plt.hist(df[attr].dropna(), bins=20, edgecolor='black')
    plt.title(f'Histogram of {attr}')
    plt.xlabel(attr)
    plt.ylabel('Frequency')
    plt.show()

# (d) Plot two histograms for each attribute (one for status=1 and one for status=0)
for attr in attributes:
    # Filter the data for each status
    df_status1 = df[df['status'] == 1]
    df_status0 = df[df['status'] == 0]
    
    plt.figure(figsize=(12, 4))
    
    # Histogram for instances with status = 1 (Parkinson's)
    plt.subplot(1, 2, 1)
    plt.hist(df_status1[attr].dropna(), bins=20, color='tomato', edgecolor='black')
    plt.title(f'{attr} (Status = 1)')
    plt.xlabel(attr)
    plt.ylabel('Frequency')
    
    # Histogram for instances with status = 0 (Healthy)
    plt.subplot(1, 2, 2)
    plt.hist(df_status0[attr].dropna(), bins=20, color='skyblue', edgecolor='black')
    plt.title(f'{attr} (Status = 0)')
    plt.xlabel(attr)
    plt.ylabel('Frequency')
    
    plt.tight_layout()
    plt.show()
```

This code first prints out a summary of all the data so you can see basic stats like the average and spread for each column. Then, it creates simple bar graphs (histograms) for three specific columns (PPE, DFA, and MDVP:Fo(Hz)) to show how the data values are distributed. Finally, it splits the data into two groups based on whether the person has Parkinson‚Äôs (status = 1) or is healthy (status = 0) and makes separate histograms for each group. This makes it easier to compare how the numbers differ between the two groups.
