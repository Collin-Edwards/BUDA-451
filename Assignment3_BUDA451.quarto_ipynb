{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Assignment 3 BUDA 451\"\n",
        "author: \"Collin Edwards\"\n",
        "date: \"today\"\n",
        "format: pdf\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## Problem 1: Working with Text Data\n",
        "\n",
        "In this problem, I work with text. I want to build a model that can say if an Amazon review is good or bad.\n",
        "\n",
        "### Part I: NLP Basics\n",
        "\n",
        "**a) What major steps would you take to process text data for sentiment detection?**\n",
        "\n",
        "I would do these steps: 1. **Clean the text:** Remove punctuation and change all letters to loIrcase to make it uniform. 2. **Tokenize:** Break the text into words because computers work with words, not sentences. 3. **Remove stop words:** Get rid of common words like \"the\" and \"and\" that do not add meaning to the text. 4. **Stemming or lemmatization:** Change words to their base form (for example, \"running\" to \"run\") to reduce complexity. 5. **Convert text to numbers:** Use methods like TF-IDF to change words into numbers for the computer to use.\n",
        "\n",
        "### Part II: Term-Frequency Vectors\n",
        "\n",
        "I have two documents:\n",
        "\n",
        "-   **Document 1:** \"This dog food is great, my dog really likes it.\"\n",
        "-   **Document 2:** \"The service was great, but the food was really bad.\"\n",
        "\n",
        "First, I remove punctuation and make them loIrcase because computers do not care about punctuation. I also remove stop words like \"the\" and \"is\" because they do not help much in understanding the text.\n",
        "\n",
        "For **Document 1**, the words are:\\\n",
        "`this, dog, food, is, great, my, dog, really, likes, it`\n",
        "\n",
        "Count each word:\\\n",
        "- this: 1\\\n",
        "- dog: 2\\\n",
        "- food: 1\\\n",
        "- is: 1\\\n",
        "- great: 1\\\n",
        "- my: 1\\\n",
        "- really: 1\\\n",
        "- likes: 1\\\n",
        "- it: 1\n",
        "\n",
        "For **Document 2**, the words are:\\\n",
        "`the, service, was, great, but, the, food, was, really, bad`\n",
        "\n",
        "Count each word:\\\n",
        "- the: 2\\\n",
        "- service: 1\\\n",
        "- was: 2\\\n",
        "- great: 1\\\n",
        "- but: 1\\\n",
        "- food: 1\\\n",
        "- really: 1\\\n",
        "- bad: 1\n",
        "\n",
        "These counts are the term-frequency vectors for the documents after removing punctuation and stop words.\n",
        "\n",
        "### Part III: TF-IDF Transformation\n",
        "\n",
        "TF-IDF stands for Term Frequencyâ€“Inverse Document Frequency. It multiplies the term frequency by the log of (M / dfi), where M is the total number of documents and dfi is the number of documents that have the term i.\n",
        "\n",
        "**c) What happens if a term appears in only one document?**\n",
        "\n",
        "If a word is in only one document, then dfi = 1. The log term becomes log(M/1) = log(M). This makes the TF-IDF Iight high, so rare words get more importance in the model. It helps the model focus on unique words that can help decide if a review is good or bad.\n",
        "\n",
        "**d) What happens if a term appears in every document?**\n",
        "\n",
        "If a word is in all documents, then dfi = M. The log term becomes log(M/M) = log(1) = 0. The Iight becomes 0. This means common words get very low importance and do not help the model. It helps the model ignore words that do not add much meaning.\n",
        "\n",
        "**e) What is the purpose of this transformation?**\n",
        "\n",
        "The goal is to reduce the effect of common words that do not help much in deciding sentiment and give more Iight to rare, important words that can help the model understand the text better. This makes the model more accurate in deciding if a review is good or bad.\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "## Problem 2: Overfitting and Regularization\n",
        "\n",
        "In this problem, I build models to decide if a movie review is good or bad. I will use three models:  \n",
        "- A Decision Tree  \n",
        "- Logistic Regression  \n",
        "- SVM\n",
        "I will use the same training and test data for all three models. The training data is from Cornell Movie Reviews, which has 10,662 reviews. The test data has 5,331 reviews. I will use TF-IDF to convert the text into numbers.\n",
        "\n",
        "The training and test data are: - **Training data:** <https://raw.githubusercontent.com/binbenliu/Teaching/main/data/cornell_movie/train.csv> - **Test data:** <https://raw.githubusercontent.com/binbenliu/Teaching/main/data/cornell_movie/test.csv>\n"
      ],
      "id": "1981070e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "# Read the training and test data from the provided URLs.\n",
        "train_url = \"https://raw.githubusercontent.com/binbenliu/Teaching/main/data/cornell_movie/train.csv\"\n",
        "test_url = \"https://raw.githubusercontent.com/binbenliu/Teaching/main/data/cornell_movie/test.csv\"\n",
        "train_df = pd.read_csv(train_url)\n",
        "test_df = pd.read_csv(test_url)\n",
        "\n",
        "# Print the first few rows and the column names.\n",
        "print(\"Train Data Head:\")\n",
        "print(train_df.head())\n",
        "print(\"Columns in Train Data:\")\n",
        "print(train_df.columns)\n"
      ],
      "id": "bb4e87e2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The training data has two columns:  \n",
        "- **y_label**: This tells if the review is positive (1) or negative (0).  \n",
        "- **text**: This contains the review.\n",
        "\n",
        "First, I load the data. Then I convert the text into numbers using TF-IDF. TF-IDF makes a matrix from the text so I can use it for our models.\n"
      ],
      "id": "3f45f8d7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "# Read the training and test data\n",
        "train_url = \"https://raw.githubusercontent.com/binbenliu/Teaching/main/data/cornell_movie/train.csv\"\n",
        "test_url  = \"https://raw.githubusercontent.com/binbenliu/Teaching/main/data/cornell_movie/test.csv\"\n",
        "\n",
        "train_df = pd.read_csv(train_url)\n",
        "test_df  = pd.read_csv(test_url)\n",
        "\n",
        "# Print the columns to see what they are.\n",
        "print(\"Columns in Train Data:\")\n",
        "print(train_df.columns)\n",
        "\n",
        "# Our data has two columns: y_label and text.\n",
        "# I use y_label as the target and text as our input.\n",
        "\n",
        "# Convert the text data to TF-IDF features.\n",
        "vectorizer = TfidfVectorizer()\n",
        "X_train = vectorizer.fit_transform(train_df['text'])\n",
        "X_test = vectorizer.transform(test_df['text'])\n",
        "\n",
        "# Set y as the label.\n",
        "y_train = train_df['y_label'].values\n",
        "y_test  = test_df['y_label'].values\n",
        "\n",
        "print(\"Number of training records:\", X_train.shape[0])\n",
        "print(\"Number of test records:\", X_test.shape[0])\n"
      ],
      "id": "6763e6ea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### a) Decision Trees\n",
        "\n",
        "I set a list of max depth values. For each, I train a decision tree and get the test accuracy.\n"
      ],
      "id": "65260479"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn import tree\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "max_depths = [2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n",
        "print(\"Decision Tree Accuracy for different max_depths:\")\n",
        "\n",
        "for depth in max_depths:\n",
        "    clf_tree = tree.DecisionTreeClassifier(criterion='entropy', max_depth=depth, random_state=42)\n",
        "    clf_tree.fit(X_train, y_train)\n",
        "    y_pred = clf_tree.predict(X_test)\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    print(f\"max_depth = {depth}: Accuracy = {acc:.4f}\")"
      ],
      "id": "b0d83b6e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "reguList = [0.1, 0.5, 1.0, 5, 10, 20, 50, 100]\n",
        "print(\"\\nLogistic Regression Accuracy for different C values:\")\n",
        "\n",
        "for regu in reguList:\n",
        "    clf_lr = LogisticRegression(penalty='l2', C=regu, max_iter=1000, random_state=42)\n",
        "    clf_lr.fit(X_train, y_train)\n",
        "    y_pred = clf_lr.predict(X_test)\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    print(f\"C = {regu}: Accuracy = {acc:.4f}\")"
      ],
      "id": "ea71b780",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.svm import SVC\n",
        "\n",
        "print(\"\\nSVM Accuracy for different C values:\")\n",
        "\n",
        "for regu in reguList:\n",
        "    clf_svm = SVC(C=regu, kernel='rbf', random_state=42)\n",
        "    clf_svm.fit(X_train, y_train)\n",
        "    y_pred = clf_svm.predict(X_test)\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    print(f\"C = {regu}: Accuracy = {acc:.4f}\")"
      ],
      "id": "51da5a53",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Discussion for Problem 2\n",
        "\n",
        "**Decision Trees:**\n",
        "\n",
        "- **Key Points:**  \n",
        "  - I tried different `max_depth` values.  \n",
        "  - The best decision tree results Ire reached when the depth was around 8â€“10.  \n",
        "  - HoIver, the overall accuracy stayed around 64.5%, which is loIr than the other models.\n",
        "- **Explanation:**  \n",
        "  A decision tree is easy to understand and shows clear rules, but it can miss some important patterns. When the tree is too simple (low depth), it does not capture enough details. When it is too deep, it can overfit the training data. In our tests, even the best tree did not perform very high compared to the others.\n",
        "\n",
        "---\n",
        "\n",
        "**Logistic Regression:**\n",
        "\n",
        "- **Key Points:**  \n",
        "  - I varied the regularization parameter **C** (which controls how simple or complex the model is).  \n",
        "  - The best logistic regression results reached an accuracy of about 85.5% when **C** was high.\n",
        "- **Explanation:**  \n",
        "  Logistic regression uses a formula that adds up the Iighted features to decide if a review is positive or negative. A larger **C** makes the model more flexible and able to learn from the data. This model did a very good job on our data and had the highest accuracy among the three models.\n",
        "\n",
        "---\n",
        "\n",
        "**SVM:**\n",
        "\n",
        "- **Key Points:**  \n",
        "  - I also varied **C** for the SVM model.  \n",
        "  - The best SVM accuracy was around 84.3% when **C** was 5 or higher.\n",
        "- **Explanation:**  \n",
        "  The SVM (Support Vector Machine) is a poIrful model that can separate classes Ill. It needed a moderate value of **C** to perform Ill, but its highest accuracy was a bit loIr than that of logistic regression.\n",
        "\n",
        "---\n",
        "\n",
        "**Overall Comparison:**\n",
        "- **Decision Tree:**  \n",
        "  - Best accuracy around 64.5%  \n",
        "  - Simple and easy to understand but not very accurate.\n",
        "- **Logistic Regression:**\n",
        "  - Best accuracy around 85.5%  \n",
        "  - Very good at learning patterns and making accurate predictions.\n",
        "- **SVM:**\n",
        "  - Best accuracy around 84.3%  \n",
        "  - Good at separating classes but not as good as logistic regression.\n",
        "- **Best Model:**\n",
        "  - Logistic regression was the best model because it had the highest accuracy. It learned useful patterns from the TF-IDF features of the text data. Decision trees, while simple and easy to interpret, did not perform as well, and SVM also did a good job but did not match the performance of logistic regression.\n",
        "\n",
        "- **Conclusion:**  \n",
        "  Logistic regression worked the best because it achieved the highest accuracy. It was able to learn useful patterns from the TF-IDF features of the text data. Decision trees, though simple and easy to interpret, did not perform as Ill, and SVM also did a good job but did not match the performance of logistic regression.\n",
        "- **Future Work:**\n",
        "  I would try more complex models like Random Forests or Neural Networks to see if they can do even better. I would also look at different ways to preprocess the text data, like using word embeddings or deep learning methods, to see if they can help improve the model's performance.\n",
        "  \n",
        "  \n",
        "## Problem 3: Ensemble Methods\n",
        "\n",
        "In this problem, we use the Pima Indians Diabetes dataset. The goal is to predict whether a patient has diabetes (1) or not (0) using eight medical features. We will first train a base modelâ€”a decision treeâ€”and then build three ensemble methods: Bagging, Random Forest, and AdaBoost. For fair comparisons, we use the same decision tree settings in every model. We report accuracy, precision, recall, and F1 score for each method.\n",
        "\n",
        "We use a **decision tree** as our base classifier with the following settings:\n",
        "- **Criterion:** entropy  \n",
        "- **Maximum depth:** 4  \n",
        "- **Random state:** 42 (so that results are repeatable)\n",
        "\n",
        "We will build and compare the following models:\n",
        "- Base Decision Tree (for baseline)\n",
        "- Bagging\n",
        "- Random Forests\n",
        "- AdaBoost\n",
        "\n",
        "### Step 1: Load and Prepare the Data\n"
      ],
      "id": "327b9d0f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "\n",
        "# Use the raw URLs for the data files\n",
        "train_url = \"https://raw.githubusercontent.com/binbenliu/Teaching/main/IntroAI/data/diabetes_train.csv\"\n",
        "test_url  = \"https://raw.githubusercontent.com/binbenliu/Teaching/main/IntroAI/data/diabetes_test.csv\"\n",
        "\n",
        "# Load the data\n",
        "train_df = pd.read_csv(train_url)\n",
        "test_df  = pd.read_csv(test_url)\n",
        "\n",
        "# Define the feature columns and target column\n",
        "x_cols = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n",
        "          'BMI', 'DiabetesPedigreeFunction', 'Age']\n",
        "y_col = 'Outcome'\n",
        "\n",
        "# Create feature matrices and target vectors\n",
        "X_train = train_df[x_cols].values\n",
        "y_train = train_df[y_col].values\n",
        "\n",
        "X_test = test_df[x_cols].values\n",
        "y_test = test_df[y_col].values\n",
        "\n",
        "print(\"Training data shape:\", X_train.shape)\n",
        "print(\"Test data shape:\", X_test.shape)"
      ],
      "id": "bb6cec63",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Step 2: Train the Base Decision Tree Model\n"
      ],
      "id": "fcd0887c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "# Train the base decision tree model\n",
        "clf_tree = DecisionTreeClassifier(criterion='entropy', max_depth=4, random_state=42)\n",
        "clf_tree.fit(X_train, y_train)\n",
        "y_pred_tree = clf_tree.predict(X_test)\n",
        "\n",
        "# Compute performance metrics for the base model\n",
        "acc_tree = accuracy_score(y_test, y_pred_tree)\n",
        "prec_tree = precision_score(y_test, y_pred_tree)\n",
        "rec_tree = recall_score(y_test, y_pred_tree)\n",
        "f1_tree = f1_score(y_test, y_pred_tree)\n",
        "\n",
        "print(\"Base Decision Tree Performance:\")\n",
        "print(f\"Accuracy:  {acc_tree:.4f}\")\n",
        "print(f\"Precision: {prec_tree:.4f}\")\n",
        "print(f\"Recall:    {rec_tree:.4f}\")\n",
        "print(f\"F1 Score:  {f1_tree:.4f}\")"
      ],
      "id": "cb70f2b6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Step 3: Train the Bagging Model Ensemble\n",
        "\n",
        "Bagging (Bootstrap Aggregation) builds many copies of the decision tree model on different random samples from the training data.\n",
        "The final prediction is made by averaging the predictions from all trees. This reduces errors and increases stability.\n"
      ],
      "id": "b4a4d541"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.ensemble import BaggingClassifier\n",
        "\n",
        "clf_bag = BaggingClassifier(\n",
        "    estimator=DecisionTreeClassifier(criterion='entropy', max_depth=4, random_state=42),\n",
        "    n_estimators=500,  # number of trees\n",
        "    max_samples=100,   # number of samples for each tree\n",
        "    bootstrap=True,    # sample with replacement\n",
        "    random_state=42\n",
        ")\n",
        "\n",
        "clf_bag.fit(X_train, y_train)\n",
        "y_pred_bag = clf_bag.predict(X_test)\n",
        "\n",
        "# Compute performance metrics for the Bagging model\n",
        "acc_bag = accuracy_score(y_test, y_pred_bag)\n",
        "prec_bag = precision_score(y_test, y_pred_bag)\n",
        "rec_bag = recall_score(y_test, y_pred_bag)\n",
        "f1_bag = f1_score(y_test, y_pred_bag)\n",
        "\n",
        "print(\"Bagging Performance:\")\n",
        "print(f\"Accuracy:  {acc_bag:.4f}\")\n",
        "print(f\"Precision: {prec_bag:.4f}\")\n",
        "print(f\"Recall:    {rec_bag:.4f}\")\n",
        "print(f\"F1 Score:  {f1_bag:.4f}\")"
      ],
      "id": "70b136e1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Step 4: Train the Random Forest Model Ensemble\n",
        "\n",
        "Random Forests build many decision trees and average their predictions. It is a more advanced version of bagging that uses random subsets of features for each tree, which helps reduce overfitting.\n"
      ],
      "id": "698e4915"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "clf_rf = RandomForestClassifier(\n",
        "    criterion='entropy', max_depth=4, n_estimators=500, random_state=42\n",
        ")\n",
        "clf_rf.fit(X_train, y_train)\n",
        "y_pred_rf = clf_rf.predict(X_test)\n",
        "\n",
        "# Compute performance metrics for the Random Forest model\n",
        "acc_rf = accuracy_score(y_test, y_pred_rf)\n",
        "prec_rf = precision_score(y_test, y_pred_rf)\n",
        "rec_rf = recall_score(y_test, y_pred_rf)\n",
        "f1_rf = f1_score(y_test, y_pred_rf)\n",
        "\n",
        "print(\"Random Forest Performance:\")\n",
        "print(f\"Accuracy:  {acc_rf:.4f}\")\n",
        "print(f\"Precision: {prec_rf:.4f}\")\n",
        "print(f\"Recall:    {rec_rf:.4f}\")\n",
        "print(f\"F1 Score:  {f1_rf:.4f}\")"
      ],
      "id": "ee239bb7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Step 5: Train the AdaBoost Model Ensemble\n"
      ],
      "id": "f94396af"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "\n",
        "clf_adaboost = AdaBoostClassifier(\n",
        "    estimator=DecisionTreeClassifier(criterion='entropy', max_depth=4, random_state=42),\n",
        "    n_estimators=500,\n",
        "    random_state=42\n",
        ")\n",
        "\n",
        "clf_adaboost.fit(X_train, y_train)\n",
        "y_pred_adaboost = clf_adaboost.predict(X_test)\n",
        "\n",
        "# Compute performance metrics for AdaBoost\n",
        "acc_adaboost = accuracy_score(y_test, y_pred_adaboost)\n",
        "prec_adaboost = precision_score(y_test, y_pred_adaboost)\n",
        "rec_adaboost = recall_score(y_test, y_pred_adaboost)\n",
        "f1_adaboost = f1_score(y_test, y_pred_adaboost)\n",
        "\n",
        "print(\"AdaBoost Performance:\")\n",
        "print(f\"Accuracy:  {acc_adaboost:.4f}\")\n",
        "print(f\"Precision: {prec_adaboost:.4f}\")\n",
        "print(f\"Recall:    {rec_adaboost:.4f}\")\n",
        "print(f\"F1 Score:  {f1_adaboost:.4f}\")"
      ],
      "id": "7520d6d8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Overall Discussion Conclusion of Problem 3\n",
        "\n",
        "**Base Decision Tree:**  \n",
        "- Used a decision tree with `max_depth=4`.  \n",
        "- Achieved an accuracy of about **74.03%** with 66.67% precision, 54.55% recall, and an F1 score of 60.00%.  \n",
        "- This serves as our baseline model.\n",
        "\n",
        "**Bagging:**  \n",
        "- Builds many trees on different random samples and averages their predictions.  \n",
        "- Improved accuracy to **75.97%** and precision to 72.50%.  \n",
        "- It helps reduce errors by combining multiple models.\n",
        "\n",
        "**Random Forest:**  \n",
        "- Similar to bagging but randomly selects features at each split.  \n",
        "- Accuracy remained around **74.03%** with slightly higher precision (70.27%) but lower recall (47.27%).  \n",
        "- It did not show significant improvement over the base model in this experiment.\n",
        "\n",
        "**AdaBoost:**  \n",
        "- Builds a series of weak classifiers that focus on previous mistakes.  \n",
        "- Performance stayed similar to the base tree with an accuracy of **74.03%** and comparable precision, recall, and F1 scores.  \n",
        "\n",
        "**Overall Conclusion:**  \n",
        "Ensemble methods like Bagging provided a small improvement over the base decision tree, while Random Forest and AdaBoost performed similarly to the base model in this case. In our experiment, Bagging appeared to have the best overall performance."
      ],
      "id": "0f542d08"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/collinedwards/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}