k3 = KMeans(n_clusters=3, random_state=42).fit(X)
print("K=3 cluster centers (scaled):\n", k3.cluster_centers_)
# 4) Compute inertias for K=1..10
inertias = [KMeans(n_clusters=k, random_state=42).fit(X).inertia_
for k in range(1, 11)]
# 5) Plot the Elbow curve and inset a small logo
fig, ax = plt.subplots(figsize=(8, 5))
ax.plot(range(1, 11), inertias, 'o-', linewidth=2, markersize=6)
ax.set_xticks(range(1, 11))
ax.set_xlabel("Number of clusters K", fontsize=12)
ax.set_ylabel("Inertia", fontsize=12)
ax.set_title("Elbow Method for USArrests", fontsize=14)
ax.grid(True, linestyle='--', alpha=0.5)
# annotate the “elbow”
opt_k = 4
ax.annotate("Elbow",
xy=(opt_k, inertias[opt_k-1]),
xytext=(opt_k+1, inertias[opt_k-1] + 23),
arrowprops=dict(arrowstyle='fancy', color='red'),
color='green')
# ─── inset the logo as a perfect circle ───
# 1) load the logo
img = mpimg.imread("images/logo1.png")
# 2) ensure RGBA
h, w = img.shape[:2]
if img.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=img.dtype)
rgba[..., :3] = img
rgba[...,  3] = 255
else:
rgba = img.copy()
# 3) build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w) / 2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
# 4) apply mask to alpha channel
rgba[..., 3] = rgba[..., 3] * mask
# 5) create and add the clipped image
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(0.98, 0.98),
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
# 6) Agglomerative clustering dendrograms
# 1) Read the PNG
logo = mpimg.imread("images/logo6.png")
h, w = logo.shape[:2]
# 2) Ensure RGBA
if logo.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=logo.dtype)
rgba[...,:3] = logo
rgba[..., 3]  = 255
else:
rgba = logo.copy()
# 3) Build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w)/2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
rgba[..., 3] *= mask  # mask alpha channel
# ——————————————————————————
# Now your existing dendrogram loop, with just two extra lines:
for method in ["single", "complete", "average"]:
Z = linkage(X, method=method)
fig, ax = plt.subplots(figsize=(6, 3))
dendrogram(Z, labels=df.index,
leaf_rotation=90, leaf_font_size=6,
ax=ax)
ax.set_title(f"{method.title()} Linkage Dendrogram", fontsize=12)
ax.set_xlabel("State", fontsize=10)
ax.set_ylabel("Distance", fontsize=10)
ax.grid(axis='y', linestyle='--', alpha=0.4)
# — insert circular logo into this axes —
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(1.99, 0.99),            # top‑right in axes fraction coords
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import linkage, dendrogram
# 1) Load the data
url = "https://raw.githubusercontent.com/binbenliu/Teaching/main/data/USArrests.txt"
df = pd.read_csv(url, index_col=0)
# 2) Normalize the features
features = ["Murder", "Assault", "UrbanPop", "Rape"]
X = StandardScaler().fit_transform(df[features])
# 3) K‑means with K=3 (just to show we can)
k3 = KMeans(n_clusters=3, random_state=42).fit(X)
print("K=3 cluster centers (scaled):\n", k3.cluster_centers_)
# 4) Compute inertias for K=1..10
inertias = [KMeans(n_clusters=k, random_state=42).fit(X).inertia_
for k in range(1, 11)]
# 5) Plot the Elbow curve and inset a small logo
fig, ax = plt.subplots(figsize=(8, 5))
ax.plot(range(1, 11), inertias, 'o-', linewidth=2, markersize=6)
ax.set_xticks(range(1, 11))
ax.set_xlabel("Number of clusters K", fontsize=12)
ax.set_ylabel("Inertia", fontsize=12)
ax.set_title("Elbow Method for USArrests", fontsize=14)
ax.grid(True, linestyle='--', alpha=0.5)
# annotate the “elbow”
opt_k = 4
ax.annotate("Elbow",
xy=(opt_k, inertias[opt_k-1]),
xytext=(opt_k+1, inertias[opt_k-1] + 23),
arrowprops=dict(arrowstyle='fancy', color='red'),
color='green')
# ─── inset the logo as a perfect circle ───
# 1) load the logo
img = mpimg.imread("images/logo1.png")
# 2) ensure RGBA
h, w = img.shape[:2]
if img.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=img.dtype)
rgba[..., :3] = img
rgba[...,  3] = 255
else:
rgba = img.copy()
# 3) build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w) / 2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
# 4) apply mask to alpha channel
rgba[..., 3] = rgba[..., 3] * mask
# 5) create and add the clipped image
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(0.98, 0.98),
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
# 6) Agglomerative clustering dendrograms
# 1) Read the PNG
logo = mpimg.imread("images/logo6.png")
h, w = logo.shape[:2]
# 2) Ensure RGBA
if logo.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=logo.dtype)
rgba[...,:3] = logo
rgba[..., 3]  = 255
else:
rgba = logo.copy()
# 3) Build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w)/2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
rgba[..., 3] *= mask  # mask alpha channel
# ——————————————————————————
# Now your existing dendrogram loop, with just two extra lines:
for method in ["single", "complete", "average"]:
Z = linkage(X, method=method)
fig, ax = plt.subplots(figsize=(6, 3))
dendrogram(Z, labels=df.index,
leaf_rotation=90, leaf_font_size=6,
ax=ax)
ax.set_title(f"{method.title()} Linkage Dendrogram", fontsize=12)
ax.set_xlabel("State", fontsize=10)
ax.set_ylabel("Distance", fontsize=10)
ax.grid(axis='y', linestyle='--', alpha=0.4)
# — insert circular logo into this axes —
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(0.25, 0.99),            # top‑right in axes fraction coords
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import linkage, dendrogram
# 1) Load the data
url = "https://raw.githubusercontent.com/binbenliu/Teaching/main/data/USArrests.txt"
df = pd.read_csv(url, index_col=0)
# 2) Normalize the features
features = ["Murder", "Assault", "UrbanPop", "Rape"]
X = StandardScaler().fit_transform(df[features])
# 3) K‑means with K=3 (just to show we can)
k3 = KMeans(n_clusters=3, random_state=42).fit(X)
print("K=3 cluster centers (scaled):\n", k3.cluster_centers_)
# 4) Compute inertias for K=1..10
inertias = [KMeans(n_clusters=k, random_state=42).fit(X).inertia_
for k in range(1, 11)]
# 5) Plot the Elbow curve and inset a small logo
fig, ax = plt.subplots(figsize=(8, 5))
ax.plot(range(1, 11), inertias, 'o-', linewidth=2, markersize=6)
ax.set_xticks(range(1, 11))
ax.set_xlabel("Number of clusters K", fontsize=12)
ax.set_ylabel("Inertia", fontsize=12)
ax.set_title("Elbow Method for USArrests", fontsize=14)
ax.grid(True, linestyle='--', alpha=0.5)
# annotate the “elbow”
opt_k = 4
ax.annotate("Elbow",
xy=(opt_k, inertias[opt_k-1]),
xytext=(opt_k+1, inertias[opt_k-1] + 23),
arrowprops=dict(arrowstyle='fancy', color='red'),
color='green')
# ─── inset the logo as a perfect circle ───
# 1) load the logo
img = mpimg.imread("images/logo1.png")
# 2) ensure RGBA
h, w = img.shape[:2]
if img.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=img.dtype)
rgba[..., :3] = img
rgba[...,  3] = 255
else:
rgba = img.copy()
# 3) build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w) / 2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
# 4) apply mask to alpha channel
rgba[..., 3] = rgba[..., 3] * mask
# 5) create and add the clipped image
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(0.98, 0.98),
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
# 6) Agglomerative clustering dendrograms
# 1) Read the PNG
logo = mpimg.imread("images/logo6.png")
h, w = logo.shape[:2]
# 2) Ensure RGBA
if logo.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=logo.dtype)
rgba[...,:3] = logo
rgba[..., 3]  = 255
else:
rgba = logo.copy()
# 3) Build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w)/2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
rgba[..., 3] *= mask  # mask alpha channel
# ——————————————————————————
# Now your existing dendrogram loop, with just two extra lines:
for method in ["single", "complete", "average"]:
Z = linkage(X, method=method)
fig, ax = plt.subplots(figsize=(6, 3))
dendrogram(Z, labels=df.index,
leaf_rotation=90, leaf_font_size=6,
ax=ax)
ax.set_title(f"{method.title()} Linkage Dendrogram", fontsize=12)
ax.set_xlabel("State", fontsize=10)
ax.set_ylabel("Distance", fontsize=10)
ax.grid(axis='y', linestyle='--', alpha=0.4)
# — insert circular logo into this axes —
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(1, 0.99),            # top‑right in axes fraction coords
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import linkage, dendrogram
# 1) Load the data
url = "https://raw.githubusercontent.com/binbenliu/Teaching/main/data/USArrests.txt"
df = pd.read_csv(url, index_col=0)
# 2) Normalize the features
features = ["Murder", "Assault", "UrbanPop", "Rape"]
X = StandardScaler().fit_transform(df[features])
# 3) K‑means with K=3 (just to show we can)
k3 = KMeans(n_clusters=3, random_state=42).fit(X)
print("K=3 cluster centers (scaled):\n", k3.cluster_centers_)
# 4) Compute inertias for K=1..10
inertias = [KMeans(n_clusters=k, random_state=42).fit(X).inertia_
for k in range(1, 11)]
# 5) Plot the Elbow curve and inset a small logo
fig, ax = plt.subplots(figsize=(8, 5))
ax.plot(range(1, 11), inertias, 'o-', linewidth=2, markersize=6)
ax.set_xticks(range(1, 11))
ax.set_xlabel("Number of clusters K", fontsize=12)
ax.set_ylabel("Inertia", fontsize=12)
ax.set_title("Elbow Method for USArrests Type shi", fontsize=14)
ax.grid(True, linestyle='--', alpha=0.5)
# annotate the “elbow”
opt_k = 4
ax.annotate("Elbow",
xy=(opt_k, inertias[opt_k-1]),
xytext=(opt_k+1, inertias[opt_k-1] + 23),
arrowprops=dict(arrowstyle='fancy', color='red'),
color='green')
# ─── inset the logo as a perfect circle ───
# 1) load the logo
img = mpimg.imread("images/logo1.png")
# 2) ensure RGBA
h, w = img.shape[:2]
if img.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=img.dtype)
rgba[..., :3] = img
rgba[...,  3] = 255
else:
rgba = img.copy()
# 3) build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w) / 2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
# 4) apply mask to alpha channel
rgba[..., 3] = rgba[..., 3] * mask
# 5) create and add the clipped image
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(0.98, 0.98),
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
# 6) Agglomerative clustering dendrograms
# 1) Read the PNG
logo = mpimg.imread("images/logo6.png")
h, w = logo.shape[:2]
# 2) Ensure RGBA
if logo.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=logo.dtype)
rgba[...,:3] = logo
rgba[..., 3]  = 255
else:
rgba = logo.copy()
# 3) Build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w)/2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
rgba[..., 3] *= mask  # mask alpha channel
# ——————————————————————————
# Now your existing dendrogram loop, with just two extra lines:
for method in ["single", "complete", "average"]:
Z = linkage(X, method=method)
fig, ax = plt.subplots(figsize=(6, 3))
dendrogram(Z, labels=df.index,
leaf_rotation=90, leaf_font_size=6,
ax=ax)
ax.set_title(f"{method.title()} Linkage Dendrogram", fontsize=12)
ax.set_xlabel("State", fontsize=10)
ax.set_ylabel("Distance", fontsize=10)
ax.grid(axis='y', linestyle='--', alpha=0.4)
# — insert circular logo into this axes —
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(1, 0.99),            # top‑right in axes fraction coords
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import linkage, dendrogram
# 1) Load the data
url = "https://raw.githubusercontent.com/binbenliu/Teaching/main/data/USArrests.txt"
df = pd.read_csv(url, index_col=0)
# 2) Normalize the features
features = ["Murder", "Assault", "UrbanPop", "Rape"]
X = StandardScaler().fit_transform(df[features])
# 3) K‑means with K=3 (just to show we can)
k3 = KMeans(n_clusters=3, random_state=42).fit(X)
# instead of print(...), do
centers = pd.DataFrame(
k3.cluster_centers_,
columns=features
)
centers
# 4) Compute inertias for K=1..10
inertias = [KMeans(n_clusters=k, random_state=42).fit(X).inertia_
for k in range(1, 11)]
# 5) Plot the Elbow curve and inset a small logo
fig, ax = plt.subplots(figsize=(8, 5))
ax.plot(range(1, 11), inertias, 'o-', linewidth=2, markersize=6)
ax.set_xticks(range(1, 11))
ax.set_xlabel("Number of clusters K", fontsize=12)
ax.set_ylabel("Inertia", fontsize=12)
ax.set_title("Elbow Method for USArrests Type Deal", fontsize=14)
ax.grid(True, linestyle='--', alpha=0.5)
# annotate the “elbow”
opt_k = 4
ax.annotate("Elbow",
xy=(opt_k, inertias[opt_k-1]),
xytext=(opt_k+1, inertias[opt_k-1] + 23),
arrowprops=dict(arrowstyle='fancy', color='red'),
color='green')
# ─── inset the logo as a perfect circle ───
# 1) load the logo
img = mpimg.imread("images/logo1.png")
# 2) ensure RGBA
h, w = img.shape[:2]
if img.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=img.dtype)
rgba[..., :3] = img
rgba[...,  3] = 255
else:
rgba = img.copy()
# 3) build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w) / 2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
# 4) apply mask to alpha channel
rgba[..., 3] = rgba[..., 3] * mask
# 5) create and add the clipped image
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(0.98, 0.98),
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
# 6) Agglomerative clustering dendrograms
# 1) Read the PNG
logo = mpimg.imread("images/logo6.png")
h, w = logo.shape[:2]
# 2) Ensure RGBA
if logo.shape[2] == 3:
rgba = np.zeros((h, w, 4), dtype=logo.dtype)
rgba[...,:3] = logo
rgba[..., 3]  = 255
else:
rgba = logo.copy()
# 3) Build a circular mask
yy, xx = np.ogrid[:h, :w]
cy, cx = h/2, w/2
r = min(h, w)/2
mask = (yy - cy)**2 + (xx - cx)**2 <= r**2
rgba[..., 3] *= mask  # mask alpha channel
# ——————————————————————————
# Now your existing dendrogram loop, with just two extra lines:
for method in ["single", "complete", "average"]:
Z = linkage(X, method=method)
fig, ax = plt.subplots(figsize=(6, 3))
dendrogram(Z, labels=df.index,
leaf_rotation=90, leaf_font_size=6,
ax=ax)
ax.set_title(f"{method.title()} Linkage Dendrogram", fontsize=12)
ax.set_xlabel("State", fontsize=10)
ax.set_ylabel("Distance", fontsize=10)
ax.grid(axis='y', linestyle='--', alpha=0.4)
# — insert circular logo into this axes —
imagebox = OffsetImage(rgba, zoom=0.10)
ab = AnnotationBbox(
imagebox,
(1, 0.99),            # top‑right in axes fraction coords
xycoords='axes fraction',
frameon=False
)
ax.add_artist(ab)
plt.tight_layout()
plt.show()
pip install pyyaml
reticulate::repl_python()
